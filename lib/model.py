{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import glob\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import os\n",
    "import keras\n",
    "import matplotlib.pyplot as plt\n",
    "import glob\n",
    "import tensorflow as tf\n",
    "from collections import defaultdict\n",
    "from keras.applications.resnet_v2 import ResNet152V2\n",
    "from keras.activations import selu\n",
    "from keras import models, callbacks\n",
    "from keras.utils import np_utils\n",
    "from keras.layers.convolutional import Conv2D, DepthwiseConv2D, MaxPooling2D, AveragePooling2D\n",
    "from keras.models import Sequential, Model\n",
    "from keras.layers.core import Dense, Dropout, Activation, Flatten\n",
    "from keras.layers.merge import add, multiply, concatenate, maximum, average\n",
    "from keras.layers import Input, LeakyReLU, ELU\n",
    "from keras.preprocessing.image import array_to_img, img_to_array, load_img\n",
    "from sklearn.model_selection import train_test_split\n",
    "from keras import optimizers\n",
    "from keras.preprocessing.image import load_img,img_to_array\n",
    "from keras.callbacks import ModelCheckpoint, LearningRateScheduler\n",
    "from keras import layers\n",
    "from keras.layers.normalization import BatchNormalization\n",
    "from scipy import optimize\n",
    "from sklearn.metrics import r2_score\n",
    "from tensorflow.keras.utils import plot_model\n",
    "from keras.optimizers import Adam, Nadam\n",
    "\n",
    "\n",
    "\n",
    "class RiceBiomassCNN:\n",
    "    def __init__(self, input_shape):\n",
    "        self.input_shape = input_shape\n",
    "        self.model = self.make_model()\n",
    "\n",
    "    def make_model(self):\n",
    "        inputs = Input(self.input_shape)\n",
    "\n",
    "        x = Conv2D(45,(3,3),padding='same')(inputs)\n",
    "        x = AveragePooling2D((2,1))(x)\n",
    "        x = BatchNormalization()(x)\n",
    "        x = Activation('relu')(x)\n",
    "        x = Conv2D(25,(3,3),padding='same')(x)\n",
    "        x = BatchNormalization()(x)\n",
    "        x = LeakyReLU(alpha=0.1)(x)\n",
    "        x = MaxPooling2D((2,2),padding='same')(x)\n",
    "\n",
    "        x1 = Conv2D(50,(3,3),padding='same')(x)\n",
    "        x1 = BatchNormalization()(x1)\n",
    "        x1 = AveragePooling2D((2,3))(x1)\n",
    "        x1 = BatchNormalization()(x1)\n",
    "        x1 = Activation('relu')(x1)\n",
    "        x1 = MaxPooling2D((3,3),padding='same')(x1)\n",
    "\n",
    "        x2 = Conv2D(25,(3,3),padding='same')(x)\n",
    "        x2 = BatchNormalization()(x2)\n",
    "        x2 = AveragePooling2D((2,3))(x2)\n",
    "        x2 = BatchNormalization()(x2)\n",
    "        x2 = Activation('relu')(x2)\n",
    "        x2 = MaxPooling2D((3,3),padding='same')(x2)\n",
    "\n",
    "        x3 = Conv2D(16,(1,1),padding='same')(x1)        \n",
    "        x3 = BatchNormalization()(x3)\n",
    "        x3 = ELU(alpha=1)(x3)\n",
    "\n",
    "        x4 = concatenate([x1,x2])\n",
    "        x4 = Conv2D(16,(1,1),padding='same')(x4)        \n",
    "        x4 = BatchNormalization()(x4)\n",
    "        x4 = ELU(alpha=1)(x4)\n",
    "\n",
    "        x5 = multiply([x3,x4])\n",
    "        x5 = Conv2D(16,(3,3),padding='same')(x5)\n",
    "        x5 = AveragePooling2D((2,2))(x5)\n",
    "        x5 = BatchNormalization()(x5)\n",
    "        x5 = Activation('relu')(x5)\n",
    "\n",
    "        x6 = Conv2D(16,(3,3),padding='same')(x4)\n",
    "        x6 = BatchNormalization()(x6)\n",
    "        x6 = Activation('relu')(x6)\n",
    "        x6 = Conv2D(16,(3,3),padding='same')(x6)\n",
    "        x6 = AveragePooling2D((2,2))(x6)\n",
    "        x6 = BatchNormalization()(x6)                \n",
    "        \n",
    "        x_m = add([x5,x6])\n",
    "        x_m = Flatten()(x_m)\n",
    "        predictions = Dense(1,activation='relu')(x_m)\n",
    "        \n",
    "        currentmodel = Model(inputs=inputs, outputs=predictions)\n",
    "        \n",
    "        return currentmodel\n",
    "\n",
    "def build(input_shape):\n",
    "    model = MODEL(input_shape).model\n",
    "    return model\n",
    "\n",
    "\n",
    "#x = LeakyReLU(alpha=0.1)(x)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
